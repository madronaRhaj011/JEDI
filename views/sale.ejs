<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JEDI DISTRIBUTION INC.</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.1/flowbite.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .harvard-crimson { background-color: #A51C30; }
        .harvard-text { color: #A51C30; }
        .dashboard-card { transition: transform 0.2s; }
        .dashboard-card:hover { transform: translateY(-5px); }
    </style>
</head>
<body class="bg-gray-50">
    <%- include('partials/nav') %>

    <div class="container mx-auto px-4 py-6">
        <% if(messages.error) { %>
            <div class="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
                <%= messages.error %>
            </div>
        <% } %>

        <% if(messages.success) { %>
            <div class="mb-4 p-4 bg-green-100 border border-green-400 text-green-700 rounded">
                <%= messages.success %>
            </div>
        <% } %>
        
        <div class="bg-white p-6 rounded-lg shadow-md my-6">
            <h2 class="text-2xl font-semibold mb-6 harvard-text">Input Sales</h2>

            <form id="salesForm" enctype="multipart/form-data" class="space-y-6">
                <div class="grid md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Customer Name</label>
                        <input type="text" name="customer_name" required class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Sales Personnel</label>
                        <input type="text" name="sales_personnel" required class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    </div>
                </div>

                <div class="space-y-4">
                    <div class="block text-sm font-medium text-gray-700 pb-2 border-b">Products Bought</div>
                    
                    <!-- Product Headers -->
                    <div class="grid grid-cols-4 gap-4 text-sm font-medium text-gray-700 px-4">
                        <div>Product</div>
                        <div>Quantity</div>
                        <div>Price</div>
                        <div class="text-right">Action</div>
                    </div>
                    
                    <div id="productContainer" class="space-y-3">
                        <!-- Product rows will be added here dynamically -->
                    </div>

                    <div class="flex justify-start">
                        <button type="button" id="addProduct" class="flex items-center justify-center bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
                            </svg>
                            Add Product
                        </button>
                    </div>
                </div>

                <div class="grid md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Sale Date</label>
                        <input type="date" name="sale_date" required class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Total Amount</label>
                        <input type="text" name="total_amount" id="total_amount" class="w-full border border-gray-300 p-2 rounded bg-gray-100 font-medium" readonly>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Proof of Sale</label>
                    <input type="file" name="proof_of_sale" required class="w-full border border-gray-300 p-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                </div>

                <div class="pt-4">
                    <button type="submit" class="w-full md:w-auto bg-green-500 hover:bg-green-600 text-white font-medium px-6 py-3 rounded transition-colors">
                        Submit Sale
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            const productContainer = document.getElementById("productContainer");
            const addProductBtn = document.getElementById("addProduct");
            const totalAmountInput = document.getElementById("total_amount");

            async function fetchProducts() {
                const response = await fetch("/sale/product-list");
                return response.json();
            }

            function createProductRow(products) {
                let row = document.createElement("div");
                row.classList.add("product-row", "grid", "grid-cols-4", "gap-4", "border", "border-gray-200", "p-4", "rounded", "items-center", "bg-gray-50");

                let select = document.createElement("select");
                select.classList.add("product-select", "w-full", "border", "border-gray-300", "p-2", "rounded", "focus:ring-2", "focus:ring-blue-500", "focus:border-blue-500");
                select.required = true;

                // Default empty option
                let defaultOption = document.createElement("option");
                defaultOption.value = "";
                defaultOption.textContent = "Select product";
                defaultOption.disabled = true;
                defaultOption.selected = true;
                select.appendChild(defaultOption);

                products.forEach(product => {
                    let option = document.createElement("option");
                    option.value = product.product_id;
                    option.textContent = product.product_name;
                    option.dataset.price = product.unit_price;
                    select.appendChild(option);
                });

                let quantity = document.createElement("input");
                quantity.type = "number";
                quantity.classList.add("quantity", "w-full", "border", "border-gray-300", "p-2", "rounded", "focus:ring-2", "focus:ring-blue-500", "focus:border-blue-500");
                quantity.required = true;
                quantity.min = 1;
                quantity.value = 1;
                quantity.placeholder = "Qty";

                let price = document.createElement("input");
                price.type = "text";
                price.classList.add("price", "w-full", "border", "border-gray-300", "p-2", "rounded", "bg-gray-100");
                price.readOnly = true;
                price.placeholder = "Price";
                
                if (select.selectedOptions[0] && select.selectedOptions[0].dataset.price) {
                    price.value = select.selectedOptions[0].dataset.price;
                }

                let removeBtn = document.createElement("button");
                removeBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" /></svg>';
                removeBtn.classList.add("remove-product", "bg-red-500", "hover:bg-red-600", "text-white", "p-2", "rounded", "flex", "items-center", "justify-center", "ml-auto", "transition-colors");
                removeBtn.type = "button";
                removeBtn.title = "Remove product";

                row.appendChild(select);
                row.appendChild(quantity);
                row.appendChild(price);
                row.appendChild(removeBtn);
                productContainer.appendChild(row);

                select.addEventListener("change", updatePrice);
                quantity.addEventListener("input", updateTotal);
                removeBtn.addEventListener("click", () => {
                    row.remove();
                    updateTotal();
                });

                updateTotal();
            }

            function updatePrice(event) {
                let priceInput = event.target.closest(".product-row").querySelector(".price");
                let selectedOption = event.target.selectedOptions[0];
                priceInput.value = selectedOption.dataset.price;
                updateTotal();
            }

            function updateTotal() {
                let total = 0;
                document.querySelectorAll(".product-row").forEach(row => {
                    let quantity = parseFloat(row.querySelector(".quantity").value) || 0;
                    let price = parseFloat(row.querySelector(".price").value) || 0;
                    total += quantity * price;
                });
                totalAmountInput.value = total.toFixed(2);
            }

            let products = await fetchProducts();

            // Ensure the first product row is created on load
            if (products.length > 0) {
                createProductRow(products);
            }

            addProductBtn.addEventListener("click", () => createProductRow(products));
        });

        document.getElementById("salesForm").addEventListener("submit", function (event) {
            event.preventDefault();

            // Show confirmation popup
            if (!confirm("Are you sure you want to submit this sale?")) {
                return; // Stop form submission if user cancels
            }

            const formData = new FormData(this);

            // Collect sale items dynamically
            const saleItems = [];
            document.querySelectorAll(".product-row").forEach(row => {
                saleItems.push({
                    product_id: row.querySelector(".product-select").value,
                    quantity_sold: row.querySelector(".quantity").value
                });
            });

            formData.append("sale_items", JSON.stringify(saleItems));

            fetch("/sale/add", {
                method: "POST",
                body: formData
            })
            .then(response => response.json()) // Convert response to JSON
            .then(data => {
                if (data.success) {
                    alert("Sale submitted successfully!"); // Optional success alert
                    window.location.href = data.redirectUrl; // Redirect manually
                } else {
                    alert("Sale submission failed: " + data.message);
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("An error occurred while submitting the sale.");
            });
        });
    </script>
</body>
</html>