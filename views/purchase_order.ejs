<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase Orders</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">

    <%- include('partials/nav') %>

    <div class="container mx-auto px-4 py-6">
        <% if(messages.error) { %>
            <div class="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
                <%= messages.error %>
            </div>
        <% } %>

        <% if(messages.success) { %>
            <div class="mb-4 p-4 bg-green-100 border border-green-400 text-green-700 rounded">
                <%= messages.success %>
            </div>
        <% } %>
        
        <button type="button" id="SeeOrderSuggestionButton" class="bg-blue-500 text-white px-4 py-2 rounded my-4 hover:bg-blue-600 transition-colors">
            <a href="/orders/order_suggestions">See Order Recommendations</a>
        </button>
        <!-- Create New Purchase Order -->
        <div class="bg-white p-6 rounded-lg shadow-md mb-8">
            <h2 class="text-2xl font-semibold mb-6">Create Custom Purchase Order</h2>
            
            <form id="CustomPOForm">
                <div class="mb-6">
                    <label for="supplier_id" class="block text-sm font-medium text-gray-700 mb-2">Supplier</label>
                    <select id="supplier_id" name="supplier_id" class="w-full border border-gray-300 rounded p-2 focus:border-indigo-500 focus:ring-indigo-500">
                        <option value="">Select a Supplier</option>
                    </select>
                </div>
        
                <div class="mb-4">
                    <div class="grid grid-cols-12 gap-4 mb-2 font-medium text-sm text-gray-700">
                        <div class="col-span-5">Product Name</div>
                        <div class="col-span-3">Quantity</div>
                        <div class="col-span-2">Price</div>
                        <div class="col-span-2"></div>
                    </div>
                    
                    <div id="productContainer">
                        <!-- Product rows will be added here dynamically -->
                    </div>
                </div>
        
                <button type="button" id="addProduct" class="bg-blue-500 text-white px-4 py-2 rounded my-4 hover:bg-blue-600 transition-colors">Add Product</button>
        
                <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded mt-2 w-full hover:bg-green-700 transition-colors">Create Order</button>
            </form>
        </div>

        <!-- Approval Modal -->
        <div id="approvalModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center z-50">
            <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
                <h3 class="text-xl font-semibold mb-4">Set Expected Delivery Date</h3>
                <p class="mb-4">Please specify the expected delivery date for this order.</p>
                
                <input type="hidden" id="modalOrderId">
                <input type="date" id="expectedDeliveryDate" class="w-full p-2 border rounded mb-4">
                
                <div class="flex justify-end gap-3">
                    <button id="cancelApproval" class="px-4 py-2 border rounded text-gray-600 hover:bg-gray-50">
                        Cancel
                    </button>
                    <button id="confirmApproval" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                        Confirm Approval
                    </button>
                </div>
            </div>
        </div>


        <!-- Delivery Review Modal (ADDED) -->
        <div id="deliveryReviewModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
            <div class="bg-white p-6 rounded-lg shadow-lg w-96">
                <h2 class="text-lg font-semibold mb-4">Submit Supplier Review</h2>

                <input type="hidden" id="reviewOrderId">
                <input type="hidden" id="reviewSupplierId">
                <input type="hidden" id="reviewDateDelivered">

                <label class="block text-sm font-medium text-gray-700">Product Quality Score (1-5)</label>
                <input type="number" id="productQualityScore" min="1" max="5" class="w-full border px-3 py-2 rounded mt-1">

                <div class="flex justify-end gap-3 mt-4">
                    <button id="cancelReview" class="px-4 py-2 bg-gray-400 text-white rounded">Cancel</button>
                    <button id="submitReview" class="px-4 py-2 bg-blue-500 text-white rounded">Submit</button>
                </div>
            </div>
        </div>


        <!-- Inventory Receipt Modal -->
<div id="inventoryReceiptModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-3xl">
        <h3 class="text-xl font-semibold mb-4">Add Products to Inventory</h3>
        <p class="mb-4 text-sm text-gray-600">Please provide expiry date and storage location for each product to complete receipt.</p>
        
        <div id="inventoryItemsContainer" class="max-h-96 overflow-y-auto">
            <!-- Product rows will be added here dynamically -->
        </div>
        
        <div class="flex justify-end gap-3 mt-6">
            <button id="cancelInventoryReceipt" class="px-4 py-2 border rounded text-gray-600 hover:bg-gray-50">
                Cancel
            </button>
            <button id="confirmInventoryReceipt" class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">
                Confirm Receipt
            </button>
        </div>
    </div>
</div>
        
        <!-- Purchase Order List -->
        <div class="bg-white p-6 shadow-md rounded-lg">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-semibold">Purchase Order List</h2>
                <div class="flex gap-2">
                    <!-- Order Status Filter -->
                    <select id="statusFilter" class="border border-gray-300 rounded px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="all">All Orders</option>
                        <option value="pending">Pending</option>
                        <option value="approved">Approved</option>
                        <option value="delivered">Delivered</option>
                        <option value="completed">Completed</option>
                    </select>
                </div>
            </div>
            
            <!-- Orders List -->
            <div id="ordersContainer" class="space-y-6">
                <% orders.forEach(order => { %>
                    <div class="order-item border border-gray-200 p-5 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                        <div class="flex flex-wrap justify-between items-start mb-3">
                            <div>
                                <h3 class="font-semibold text-lg">Order ID: <span class="text-gray-700"><%= order.id %></span></h3>
                                <div class="text-gray-600 mt-1">Supplier: <span class="font-medium"><%= order.supplier_name %></span></div>
                                <div class="text-gray-600 mt-1">Date: <span class="font-medium"><%= order.order_date %></span></div>
                            </div>
                            <div class="text-gray-600 mt-2 md:mt-0">
                                Status: 
                                <span class="inline-flex items-center px-2.5 py-0.5 bg-yellow-100 text-yellow-700 font-medium rounded-full text-sm">
                                    <span class="w-2 h-2 bg-yellow-500 rounded-full mr-1.5"></span>
                                    <%= order.status %>
                                </span>
                            </div>
                        </div>
                        <div class="mt-4">
                            <h4 class="font-semibold text-gray-800 mb-2">Products</h4>
                            <div class="bg-gray-50 rounded-md p-3">
                                <% order.products.forEach(product => { %>
                                    <div class="grid grid-cols-8 gap-2 text-sm py-1">
                                        <div class="col-span-4 font-medium"><%= product.product_name %></div>
                                        <div class="col-span-2"><%= product.quantity_ordered %> units</div>
                                        <div class="col-span-2">₱<%= (product.unit_price * product.quantity_ordered).toFixed(2) %></div>
                                    </div>
                                <% }) %>
                                <div class="grid grid-cols-8 gap-2 text-sm border-t border-gray-200 mt-2 pt-2 font-medium">
                                    <div class="col-span-4 text-right">Total:</div>
                                    <div class="col-span-2"><%= order.products.reduce((sum, p) => sum + p.quantity_ordered, 0) %> units</div>
                                    <div class="col-span-2">₱<%= order.total_amount.toFixed(2) %></div>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>

            <!-- No Orders Message (Hidden initially) -->
            <p id="noOrdersMessage" class="text-center text-gray-500 mt-4 hidden">No orders found for this status.</p>

            
            <!-- Pagination -->
            <div class="mt-6 flex justify-between items-center">
                <div class="text-gray-600 text-sm">Showing 2 of 10 orders</div>
                <div class="flex gap-1">
                    <button class="px-3 py-1 border rounded text-gray-600 hover:bg-gray-50">&laquo; Prev</button>
                    <button class="px-3 py-1 border rounded bg-blue-500 text-white">1</button>
                    <button class="px-3 py-1 border rounded text-gray-600 hover:bg-gray-50">2</button>
                    <button class="px-3 py-1 border rounded text-gray-600 hover:bg-gray-50">3</button>
                    <button class="px-3 py-1 border rounded text-gray-600 hover:bg-gray-50">Next &raquo;</button>
                </div>
            </div>
        </div>
        
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
    // Fetch suppliers
    fetch("/supplier/supplier_id_name")
        .then(response => response.json())
        .then(data => {
            const dropdown = document.getElementById("supplier_id");
            data.forEach(supplier => {
                let option = document.createElement("option");
                option.value = supplier.id;
                option.textContent = supplier.supplier_name;
                dropdown.appendChild(option);
            });
        })
        .catch(error => console.error("Error fetching suppliers:", error));


    const productContainer = document.getElementById("productContainer");
    const addProductBtn = document.getElementById("addProduct");
    const totalPriceDisplay = document.createElement("div");
    totalPriceDisplay.classList.add("mt-4", "text-lg", "font-semibold");
    totalPriceDisplay.textContent = "Total Amount: ₱0.00";
    productContainer.after(totalPriceDisplay);

    let supplierProducts = []; // Store products for the selected supplier with pricing

    // Fetch supplier products with pricing when supplier is selected
    document.getElementById("supplier_id").addEventListener("change", function () {
        const supplierId = this.value;
        if (supplierId) {
            productContainer.innerHTML = "";
            fetch(`/supplier/pricing_agreements/${supplierId}`)
                .then(response => response.json())
                .then(data => {
                    supplierProducts = data;
                    addProductBtn.disabled = supplierProducts.length === 0; // Disable if no products available
                    createProductRow(); // Add first row
                })
                .catch(error => console.error("Error fetching supplier products:", error));
        }
    });

    function createProductRow() {
        const availableProducts = getAvailableProducts();
        
        if (availableProducts.length === 0) {
            addProductBtn.disabled = true; // Disable button if no products available
            return;
        }

        let row = document.createElement("div");
        row.classList.add("product-row", "grid", "grid-cols-12", "gap-4", "border", "p-3", "rounded", "items-center", "mb-2");

        let productSelect = document.createElement("select");
        productSelect.name = "product_id[]";
        productSelect.classList.add("col-span-5", "w-full", "border", "p-2", "rounded", "product-select");
        productSelect.required = true; // Make selection required

        let defaultOption = document.createElement("option");
        defaultOption.value = "";
        defaultOption.textContent = "Select a product";
        productSelect.appendChild(defaultOption);

        availableProducts.forEach(product => {
            let option = document.createElement("option");
            option.value = product.product_id;
            option.textContent = product.product_name;
            option.dataset.price = product.pricing_agreement;
            productSelect.appendChild(option);
        });

        let quantityInput = document.createElement("input");
        quantityInput.type = "number";
        quantityInput.name = "quantity[]";
        quantityInput.placeholder = "Enter quantity";
        quantityInput.min = "1";
        quantityInput.required = true; // Make quantity required
        quantityInput.classList.add("col-span-3", "p-2", "border", "rounded", "w-full", "quantity-input");

        let priceInput = document.createElement("input");
        priceInput.type = "number";
        priceInput.name = "price[]";
        priceInput.placeholder = "Price";
        priceInput.readOnly = true;
        priceInput.classList.add("col-span-2", "p-2", "border", "rounded", "w-full", "price-input");

        let removeBtn = document.createElement("button");
        removeBtn.textContent = "Remove";
        removeBtn.classList.add("col-span-2", "bg-red-500", "text-white", "px-3", "py-2", "rounded", "hover:bg-red-600", "transition-colors");
        removeBtn.type = "button";

        removeBtn.addEventListener("click", () => {
            row.remove();
            preventDuplicateSelection();
            updateTotalPrice();
            checkAddButtonState();
        });

        productSelect.addEventListener("change", function () {
            const selectedOption = this.options[this.selectedIndex];
            priceInput.value = selectedOption.dataset.price || "";
            preventDuplicateSelection();
            updateTotalPrice();
            checkAddButtonState();
        });

        quantityInput.addEventListener("input", updateTotalPrice);

        row.appendChild(productSelect);
        row.appendChild(quantityInput);
        row.appendChild(priceInput);
        row.appendChild(removeBtn);
        productContainer.appendChild(row);

        preventDuplicateSelection();
        checkAddButtonState();
    }

    // Function to check the state of the add button
    function checkAddButtonState() {
        // Check if any row has an empty selection
        const emptySelectionExists = Array.from(document.querySelectorAll(".product-select")).some(select => !select.value);
        
        // Check if there are any available products left
        const availableProductsExist = getAvailableProducts().length > 0;
        
        // Disable the button if there's an empty selection or no available products
        addProductBtn.disabled = emptySelectionExists || !availableProductsExist;
    }

    function preventDuplicateSelection() {
        const productSelects = document.querySelectorAll(".product-select");
        let selectedProducts = new Set();

        productSelects.forEach(select => {
            if (select.value) selectedProducts.add(select.value);
        });

        productSelects.forEach(select => {
            const currentValue = select.value;
            Array.from(select.options).forEach(option => {
                if (option.value) {
                    option.disabled = selectedProducts.has(option.value) && option.value !== currentValue;
                }
            });
        });
    }

    function getAvailableProducts() {
        // Get all currently selected product IDs
        const selectedProductIds = new Set();
        document.querySelectorAll(".product-select").forEach(select => {
            if (select.value) {
                selectedProductIds.add(select.value.toString());
            }
        });
        
        // Return only products that haven't been selected yet
        return supplierProducts.filter(product => {
            return !selectedProductIds.has(product.product_id.toString());
        });
    }

    function updateTotalPrice() {
        let totalPrice = 0;
        document.querySelectorAll(".product-row").forEach(row => {
            const quantity = row.querySelector(".quantity-input").value;
            const price = row.querySelector(".price-input").value;
            if (quantity && price) {
                totalPrice += parseFloat(quantity) * parseFloat(price);
            }
        });

        totalPriceDisplay.textContent = `Total Price: ₱${totalPrice.toFixed(2)}`;
    }

    addProductBtn.addEventListener("click", createProductRow);
});
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const form = document.getElementById("CustomPOForm");
    
            form.addEventListener("submit", function(event) {
                event.preventDefault(); // Prevent default form submission
                
                const formData = new FormData(form);
    
                // Convert formData to an object
                const data = {
                    supplier_id: formData.get("supplier_id"), // Get the supplier ID
                    products: [] // Store selected products
                };
    
                // Get all product rows
                const productRows = document.querySelectorAll("#productContainer .product-row");
    
                productRows.forEach(row => {
                    const productSelect = row.querySelector("select[name='product_id[]']");
                    const quantityInput = row.querySelector("input[name='quantity[]']");
                    const priceInput = row.querySelector("input[name='price[]']");
                    
                    if (productSelect.value && quantityInput.value && priceInput.value) {
                        data.products.push({
                            product_id: productSelect.value,
                            quantity: quantityInput.value,
                            price: priceInput.value
                        });
                    }
                });
    
                console.log("Sending Data:", data); // Debugging
    
                // Send data to backend using fetch
                fetch("/orders/createCustomPO", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(result => {
                    console.log("Success:", result);
                    alert("Purchase Order Created Successfully!");
                    form.reset(); // Reset the form after successful submission
                    productContainer.innerHTML = ""; // Clear product rows
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("Something went wrong!");
                });
            });
        });
    </script>
    <!-- Update your client-side JavaScript in your EJS file -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
    const statusFilter = document.getElementById("statusFilter");
    const approvalModal = document.getElementById("approvalModal");
    const modalOrderId = document.getElementById("modalOrderId");
    const expectedDeliveryDate = document.getElementById("expectedDeliveryDate");
    const cancelApproval = document.getElementById("cancelApproval");
    const confirmApproval = document.getElementById("confirmApproval");
    
    // Review modal elements
    const deliveryReviewModal = document.getElementById("deliveryReviewModal");
    const reviewOrderId = document.getElementById("reviewOrderId");
    const reviewSupplierId = document.getElementById("reviewSupplierId");
    const reviewDateDelivered = document.getElementById("reviewDateDelivered");
    const productQualityScore = document.getElementById("productQualityScore");
    const cancelReview = document.getElementById("cancelReview");
    const submitReview = document.getElementById("submitReview");
    
    // Inventory receipt modal elements
    const inventoryReceiptModal = document.getElementById("inventoryReceiptModal");
    const inventoryItemsContainer = document.getElementById("inventoryItemsContainer");
    const cancelInventoryReceipt = document.getElementById("cancelInventoryReceipt");
    const confirmInventoryReceipt = document.getElementById("confirmInventoryReceipt");
    let currentOrderIdForInventory = null;
    let currentSupplierIdForInventory = null;

    // Prevent past dates from being selected
    const today = new Date().toISOString().split('T')[0];
    expectedDeliveryDate.setAttribute('min', today);

    // Set default date to tomorrow
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    expectedDeliveryDate.value = tomorrow.toISOString().split('T')[0];

    // Close modals when cancel buttons are clicked
    cancelApproval.addEventListener("click", function () {
        approvalModal.classList.add("hidden");
    });
    
    cancelReview.addEventListener("click", function () {
        deliveryReviewModal.classList.add("hidden");
    });
    
    cancelInventoryReceipt.addEventListener("click", function () {
        inventoryReceiptModal.classList.add("hidden");
    });

    // Handle order approval with delivery date
    confirmApproval.addEventListener("click", function () {
        const orderId = modalOrderId.value;
        const deliveryDate = expectedDeliveryDate.value;

        if (!deliveryDate) {
            alert("Please select an expected delivery date.");
            return;
        }

        const selectedDate = new Date(deliveryDate);
        const now = new Date();
        now.setHours(0, 0, 0, 0);

        if (selectedDate < now) {
            alert("Expected delivery date cannot be in the past!");
            return;
        }

        // Disable button and show loading state
        confirmApproval.disabled = true;
        confirmApproval.innerText = "Updating...";

        fetch(`/orders/update_order_status`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                id: orderId,
                status: "approved",
                expected_delivery_date: deliveryDate
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(`Order ID ${orderId} approved with expected delivery on ${deliveryDate}`);

                // Update status dynamically instead of reloading everything
                const orderElement = document.querySelector(`[data-id="${orderId}"]`).closest(".order-item");
                orderElement.querySelector(".status-badge").innerText = "approved";

                approvalModal.classList.add("hidden");
            } else {
                alert("Failed to update order status.");
            }
        })
        .catch(error => console.error("Error updating order:", error))
        .finally(() => {
            confirmApproval.disabled = false;
            confirmApproval.innerText = "Confirm";
        });
    });
    
    // Submit review and update status
    submitReview.addEventListener("click", function() {
        const orderId = reviewOrderId.value;
        const supplierId = reviewSupplierId.value;
        const dateDelivered = reviewDateDelivered.value;
        const qualityScore = productQualityScore.value;

        if (qualityScore < 1 || qualityScore > 5) {
            alert("Please enter a valid Product Quality Score (1-5).");
            return;
        }

        fetch(`/orders/submit_supplier_review`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                supplier_id: supplierId,
                purchase_order_id: orderId,
                date_delivered: dateDelivered,
                product_quality_score: qualityScore
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(`Review submitted successfully.`);
                updateOrderStatus(orderId, "delivered"); 
                deliveryReviewModal.classList.add("hidden");
            } else {
                alert("Failed to submit review.");
            }
        })
        .catch(error => console.error("Error submitting review:", error));
    });
    
    // Submit inventory receipt
    confirmInventoryReceipt.addEventListener("click", function() {
        const orderId = currentOrderIdForInventory;
        const supplierId = currentSupplierIdForInventory;
        
        // Get all product rows
        const productRows = inventoryItemsContainer.querySelectorAll(".inventory-product-row");
        const inventoryItems = [];
        let isValid = true;
        
        productRows.forEach(row => {
            const productId = row.dataset.productId;
            const quantity = row.dataset.quantity;
            const unitPrice = row.dataset.price;
            const expiryDate = row.querySelector(".expiry-date").value;
            const storageLocation = row.querySelector(".storage-location").value;
            
            if (!expiryDate) {
                alert("Please enter an expiry date for all products.");
                isValid = false;
                return;
            }
            
            if (!storageLocation) {
                alert("Please enter a storage location for all products.");
                isValid = false;
                return;
            }
            
            
            inventoryItems.push({
                product_id: productId,
                supplier_id: supplierId,
                quantity_available: quantity,
                unit_price: unitPrice,
                expiry_date: expiryDate,
                storage_location: storageLocation
            });
        });
        
        if (!isValid) return;
        
        // Disable button and show loading state
        confirmInventoryReceipt.disabled = true;
        confirmInventoryReceipt.innerText = "Processing...";
        
        fetch(`/orders/add_to_inventory`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                purchase_order_id: orderId,
                inventory_items: inventoryItems
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Products successfully added to inventory!");
                updateOrderStatus(orderId, "completed");
                inventoryReceiptModal.classList.add("hidden");
            } else {
                alert(data.message || "Failed to add products to inventory.");
            }
        })
        .catch(error => console.error("Error adding to inventory:", error))
        .finally(() => {
            confirmInventoryReceipt.disabled = false;
            confirmInventoryReceipt.innerText = "Confirm Receipt";
        });
    });

    // Add event listeners for update-status buttons on page load
    addStatusUpdateListeners();

    // Handle status filtering
    statusFilter.addEventListener("change", function () {
        const selectedStatus = this.value;

        fetch(`/orders/purchase_order?status=${selectedStatus}`, { 
            method: 'GET', 
            headers: { 'X-Requested-With': 'XMLHttpRequest' } 
        })
        .then(response => response.json())
        .then(data => {
            const ordersContainer = document.getElementById("ordersContainer");
            const noOrdersMessage = document.getElementById("noOrdersMessage");
            ordersContainer.innerHTML = ""; 

            if (data.length === 0) {
                noOrdersMessage.classList.remove("hidden");
            } else {
                noOrdersMessage.classList.add("hidden");
                data.forEach(order => {
                    const nextStatus = getNextStatus(order.status);
                    const orderElement = document.createElement("div");
                    orderElement.classList.add("order-item", "border", "p-5", "rounded-lg", "shadow-sm", "hover:shadow-md", "transition-shadow");

                    const deliveryDateDisplay = order.expected_delivery_date 
                        ? `<div class="text-gray-600 mt-1">Expected Delivery: <span class="font-medium">${new Date(order.expected_delivery_date).toLocaleDateString()}</span></div>` 
                        : '';

                    orderElement.innerHTML = `
                        <div class="flex flex-wrap justify-between items-start mb-3">
                            <div>
                                <h3 class="font-semibold text-lg">Order ID: <span class="text-gray-700">${order.id}</span></h3>
                                <div class="text-gray-600 mt-1">Supplier: <span class="font-medium">${order.supplier_name}</span></div>
                                <div class="text-gray-600 mt-1">Date: <span class="font-medium">${new Date(order.order_date).toLocaleDateString()}</span></div>
                                ${deliveryDateDisplay}
                            </div>
                            <div class="text-gray-600 mt-2 md:mt-0">
                                Status: 
                                <span class="status-badge inline-flex items-center px-2.5 py-0.5 bg-yellow-100 text-yellow-700 font-medium rounded-full text-sm">
                                    <span class="w-2 h-2 bg-yellow-500 rounded-full mr-1.5"></span>
                                    ${order.status}
                                </span>
                            </div>
                        </div>
                        <div class="mt-4">
                            <h4 class="font-semibold text-gray-800 mb-2">Products</h4>
                            <div class="bg-gray-50 rounded-md p-3">
                                ${order.products.map(product => `
                                    <div class="grid grid-cols-8 gap-2 text-sm py-1">
                                        <div class="col-span-4 font-medium">${product.product_name}</div>
                                        <div class="col-span-2">${product.quantity_ordered} units</div>
                                        <div class="col-span-2">₱${(product.unit_price * product.quantity_ordered).toFixed(2)}</div>
                                    </div>
                                `).join('')}
                                <div class="grid grid-cols-8 gap-2 text-sm border-t border-gray-200 mt-2 pt-2 font-medium">
                                    <div class="col-span-4 text-right">Total:</div>
                                    <div class="col-span-2">${order.products.reduce((sum, p) => sum + p.quantity_ordered, 0)} units</div>
                                    <div class="col-span-2">₱${order.total_amount.toFixed(2)}</div>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4 flex items-center justify-end gap-3">
                            ${nextStatus !== null ? `
                                <button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors text-sm font-medium update-status" 
                                  data-id="${order.id}" 
                                  data-next="${nextStatus}" 
                                  data-supplier="${order.supplier_id}"
                                  data-current="${order.status}">
                                    Mark as ${nextStatus}
                                </button>
                            ` : ""}
                        </div>
                    `;
                    ordersContainer.appendChild(orderElement);
                });

                // Add event listeners to the newly created buttons
                addStatusUpdateListeners();
            }
        })
        .catch(error => console.error("Error fetching orders:", error));
    });

    function addStatusUpdateListeners() {
        document.querySelectorAll(".update-status").forEach(button => {
            button.addEventListener("click", function () {
                const orderId = this.dataset.id;
                const nextStatus = this.dataset.next;
                const supplierId = this.dataset.supplier;
                const currentStatus = this.dataset.current;
                
                if (currentStatus === "approved" && nextStatus === "delivered") {
                    // Show review modal before marking as delivered
                    reviewOrderId.value = orderId;
                    reviewSupplierId.value = supplierId;
                    reviewDateDelivered.value = new Date().toISOString().split('T')[0];
                    productQualityScore.value = ""; // Reset score
                    deliveryReviewModal.classList.remove("hidden");
                } else if (nextStatus === "approved") {
                    // Show approval modal with delivery date
                    modalOrderId.value = orderId;
                    approvalModal.classList.remove("hidden");
                } else if (currentStatus === "delivered" && nextStatus === "completed") {
                    // Show inventory receipt modal
                    loadOrderItemsForInventory(orderId, supplierId);
                } else {
                    // Direct update for other status changes
                    updateOrderStatus(orderId, nextStatus);
                }
            });
        });
    }
    
    function loadOrderItemsForInventory(orderId, supplierId) {
        // Store current order and supplier IDs
        currentOrderIdForInventory = orderId;
        currentSupplierIdForInventory = supplierId;
        
        // Clear previous items
        inventoryItemsContainer.innerHTML = '';
        
        // Fetch order items from the backend
        fetch(`/orders/get_order_items/${orderId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.items && data.items.length > 0) {
                    // Generate a batch number based on date and order ID
                    const today = new Date();
                    // const defaultBatchNumber = `BATCH-${today.getFullYear()}${(today.getMonth()+1).toString().padStart(2, '0')}${today.getDate().toString().padStart(2, '0')}-${orderId}`;
                    
                    // Create a row for each product
                    data.items.forEach(item => {
                        const row = document.createElement('div');
                        row.classList.add('inventory-product-row', 'p-4', 'border-b', 'border-gray-200');
                        row.dataset.productId = item.product_id;
                        row.dataset.quantity = item.quantity_ordered;
                        row.dataset.price = item.unit_price;
                        
                        // Set minimum expiry date to tomorrow
                        const tomorrow = new Date();
                        tomorrow.setDate(tomorrow.getDate() + 1);
                        const minDate = tomorrow.toISOString().split('T')[0];
                        
                        row.innerHTML = `
                            <div class="mb-2 font-medium">${item.product_name}</div>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm text-gray-600 mb-1">Expiry Date</label>
                                    <input type="date" class="expiry-date w-full p-2 border rounded" min="${minDate}" required>
                                </div>
                                <div>
                                    <label class="block text-sm text-gray-600 mb-1">Storage Location</label>
                                    <input type="text" class="storage-location w-full p-2 border rounded" placeholder="e.g., Shelf A-12" required>
                                </div>
                            </div>
                            <div class="text-sm text-gray-600 mt-2">
                                Quantity: ${item.quantity_ordered} units
                            </div>
                        `;
                        
                        inventoryItemsContainer.appendChild(row);
                    });
                    
                    // Show the modal
                    inventoryReceiptModal.classList.remove("hidden");
                } else {
                    alert("No products found for this order.");
                }
            })
            .catch(error => {
                console.error("Error loading order items:", error);
                alert("Error loading order items. Please try again.");
            });
    }

    function getNextStatus(currentStatus) {
        return { "pending": "approved", "approved": "delivered", "delivered": "completed", "completed": "" }[currentStatus] || null;
    }

    function updateOrderStatus(orderId, nextStatus) {
        fetch(`/orders/update_order_status`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id: orderId, status: nextStatus })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(`Order ID ${orderId} marked as ${nextStatus}`);
                const statusBadge = document.querySelector(`[data-id="${orderId}"]`).closest(".order-item").querySelector(".status-badge");
                if (statusBadge) {
                    statusBadge.innerText = nextStatus;
                }
                
                // If we just marked as delivered, we need to update the button to say "Mark as completed"
                if (nextStatus === "delivered") {
                    const button = document.querySelector(`[data-id="${orderId}"]`);
                    if (button) {
                        button.dataset.current = "delivered";
                        button.dataset.next = "completed";
                        button.textContent = "Mark as completed";
                    }
                }
                
                // If we just marked as completed, hide the button
                if (nextStatus === "completed") {
                    const button = document.querySelector(`[data-id="${orderId}"]`);
                    if (button) {
                        button.style.display = "none";
                    }
                }
            } else {
                alert("Failed to update order status.");
            }
        })
        .catch(error => console.error("Error:", error));
    }
});
    </script>

        
        
    
    
</body>
</html>